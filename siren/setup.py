"""
This is a setup.py script generated by py2applet

Usage (OS X):
    python setup.py py2app

Usage (Windows):
    python setup.py py2exe
    

Edits by Pauli
"""

import sys
import os
import os.path
import re
import subprocess
import pdb
import glob

INSIDE_SETUP = True

# Common info
APP = 'siren.py'
NAME="python-siren"
SHORT_NAME="Siren"
VERSION = '2.1.1'
DESCRIPTION="Interactive Redescription Mining"
AUTHOR="Esther Galbrun and Pauli Miettinen"
AUTHOR_EMAIL="galbrun@cs.helsinki.fi"
URL="http://www.cs.helsinki.fi/u/galbrun/redescriptors/siren/"
LICENSE="Apache_2.0"
COPYRIGHT='(C) 2012-2014 Esther Galbrun and Pauli Miettinen'

########## SETUPTOOLS FILES
LICENSES = ['LICENSE_basemap', 'LICENSE_matplotlib', 'LICENSE_python', 'LICENSE_wx', 'LICENSE_grako']
ST_RESOURCES=['help', 'commons', 'screenshots', 'ABOUT', 'LICENSE',
              'ui_confdef.xml', 'reremi/miner_confdef.xml', 'reremi/inout_confdef.xml']
# N.B. You must include the icon files later
ST_FILES = ['classConnectionDialog.py',
            'classEProjView.py',
            'classGridTable.py',
            'classGView.py',
            'classInterObjects.py',
            'classMapView.py',
            'classParaView.py',
            'classPreferencesDialog.py',
            'classProj.py',
            'classSiren.py',
            'classWorkClient.py',
            'classWorkInactive.py',
            'classWorkLocal.py',
            'classWorkServer.py',
            'DataWrapper.py',
            'factView.py',
            'miscDialogs.py',
            'siren.py',
            'toolMath.py',
            'toolWP.py',
            'tsne.py']

ST_MORE_FILES=['ez_setup.py']
ST_PACKAGES = ['wx', 'reremi',  'sklearn', 'mpl_toolkits']
MATPLOTLIB_BACKENDS = ['wxagg']

extra_options = dict(
    name=NAME,
    version=VERSION,
    description=(DESCRIPTION),
    author=AUTHOR,
    author_email=AUTHOR_EMAIL,
    url=URL,
    license=LICENSE,
    )

def get_svnrevision():
    svn_revision = '-1'
    try:
        p = subprocess.check_output(['svn', 'info'])
    except (subprocess.CalledProcessError, OSError):
        print "No SVN found, using default svn revision (-1) instead"
    else:
        for line in p.splitlines():
            l = line.split()
            if l[0] == 'Revision:':
                svn_revision = l[1]
                break
    return svn_revision


if sys.platform == 'darwin':
    if not INSIDE_SETUP:
            print "Use the other setup, inside siren folder"

    ################ MAC SETUP
    # Get SVN revision -- works w/o awk/grep/sed
    
    # Bootstrap
    import ez_setup
    ez_setup.use_setuptools()
    
    from setuptools import setup

    # A custom plist to associate with .siren -files
    Plist = dict(CFBundleDocumentTypes = [dict(CFBundleTypeExtensions=['siren'],
                                               CFBundleTypeName='Siren data file',
                                               CFBundleTypeRole = 'Viewer',
                                               CFBundleTypeIconFile = 'siren_file_icon.icns'),
                                               ],
                CFBundleShortVersionString = VERSION,
                CFBundleVersion = get_svnrevision(),
                CFBundleName = SHORT_NAME,
                CFBundleIdentifier = "fi.helsinki.cs.siren",
                NSHumanReadableCopyright = COPYRIGHT
        )

    ICONS = ['icons/siren_icon.icns', 'icons/siren_file_icon.icns', 'icons/siren_icon32x32.png', 'icons/siren_icon.ico', 'icons/usiren_icon.ico']
    
    OPTIONS = {'argv_emulation': True,
    'iconfile': 'icons/siren_icon.icns',
    'packages': ST_PACKAGES,
    #'matplotlib_backends': MATPLOTLIB_BACKENDS,
    #'includes': ['ui_confdef.xml'], 
    #'includes': ['reremi'],
    'resources': ST_RESOURCES+ICONS+LICENSES,
    'site_packages': True,
    #'semi-standalone': True, # depends on local Python
    'plist': Plist,
    }
    # Set extra options
    extra_options.update(dict(
        app=[APP],
        data_files=ST_FILES,
        options={'py2app': OPTIONS},
        setup_requires=['py2app']
        ))
    # Run setup
    setup(**extra_options)

    # Post setup
    # Copy files
    print "Copying files..."
    subprocess.call('cp LICENSE dist/', shell=True)
    subprocess.call('mkdir dist/third-party-licenses/', shell=True)
    for f in LICENSES:
        subprocess.call('cp '+f+' dist/third-party-licenses/', shell=True)
    subprocess.call('cp README_mac.rtf dist/README.rtf', shell=True)
    subprocess.call('cp CHANGELOG dist/CHANGELOG', shell=True)
    subprocess.call('ln -s /Applications dist/', shell=True)
    subprocess.call('cp icons/siren_dmg_icon.icns dist/.VolumeIcon.icns', shell=True)
    # Set VolumeIcon's creator
    subprocess.call('SetFile -c icnC dist/.VolumeIcon.icns', shell=True)
    # Make read/write tmp disk image
    print "Creating initial disk image"
    subprocess.call('hdiutil create -srcfolder dist/ -volname '+SHORT_NAME+' -format UDRW -ov raw-'+SHORT_NAME+'.dmg', shell=True)
    # Attach the disk image
    subprocess.call('mkdir tmp', shell=True)
    subprocess.call('hdiutil attach raw-'+SHORT_NAME+'.dmg -mountpoint tmp', shell=True)
    # Set custom icon
    subprocess.call('SetFile -a C tmp', shell=True)
    # Detach
    subprocess.call('hdiutil detach tmp', shell=True)
    subprocess.call('rm -rf tmp', shell=True)
    subprocess.call('rm -f '+SHORT_NAME+'.dmg', shell=True)
    # Convert
    print "Converting the disk image to the final one"
    subprocess.call('hdiutil convert raw-'+SHORT_NAME+'.dmg -format UDZO -o '+SHORT_NAME+'.dmg', shell=True)
    # Clean
    subprocess.call('rm -rf dist build', shell=True)
    subprocess.call('rm -f raw-'+SHORT_NAME+'.dmg', shell=True)

    
elif sys.platform == 'win32':
    if not INSIDE_SETUP:
            print "Use the other setup, inside siren folder"

    ################ WINDOWS SETUP
    ## Should this be 'win64'??
    from distutils.core import setup
    import py2exe
    import matplotlib

    WICONS = [('icons', glob.glob('icons\\*.ico') + glob.glob('icons\\*.png'))]
    WLICENSES = [('', ['ABOUT', 'LICENSE']+LICENSES)]
    WCONFIGS = [('', ['ui_confdef.xml']), ('reremi', ['reremi\\miner_confdef.xml', 'reremi\\inout_confdef.xml'])]
    WMORE = [('help', glob.glob('help\\*'))]

    OPTIONS = {
    'packages': ST_PACKAGES,
    'dll_excludes': ['MSVCP90.dll'],
    'includes' : ['scipy.sparse.csgraph._validation','scipy.special._ufuncs_cxx','matplotlib.backends.backend_tkagg'],
    'excludes': ['email', '_gtkagg', '_tkagg', '_ssl', 'nose', 'pygments', 'doctest'],
    }
    # Set extra options
    MPL = matplotlib.get_py2exe_datafiles()
    MTK = [('mpl_toolkits\\basemap\\data', glob.glob('C:\\Python27\\Lib\\site-packages\\mpl_toolkits\\basemap\\data\\*'))]
    extra_options.update(dict(
        windows=[APP],
        data_files= WICONS + WLICENSES + WCONFIGS + WMORE + MPL + MTK,
        options={'py2exe': OPTIONS}))
    # Run setup
    setup(**extra_options)


else:
    ################ LINUX SETUP
    from distutils.core import setup
    
    DU_RESOURCES_SIREN=['ui_confdef.xml', 'ABOUT', 'LICENSE']+LICENSES      
    DU_RESOURCES_REREMI=['miner_confdef.xml', 'inout_confdef.xml']

    patterns = [('reremi.grako', []),
                ('help', ['help/*']),
                ('icons', ['icons/*.png', 'icons/*.ico'])]
                  
    if INSIDE_SETUP:
        DU_FILES = [f[:-3] for f in ST_FILES]
        PACKAGE_DATA = {'': DU_RESOURCES_SIREN,
                        'reremi': DU_RESOURCES_REREMI}
        DU_PACKAGES = ['reremi']
        PREFF_DOT = ""
        PREFF_SLASH = ""
    else:
        DU_FILES = []
        PACKAGE_DATA = {'siren': DU_RESOURCES_SIREN,
                        'siren.reremi': DU_RESOURCES_REREMI}
        DU_PACKAGES = ['siren', 'siren.reremi']
        PREFF_DOT = "siren."
        PREFF_SLASH = "siren/"

    for pack, pattern in patterns:
        DU_PACKAGES.append(PREFF_DOT+pack)
        PACKAGE_DATA[PREFF_DOT+pack] = []
        for p in pattern:
            PACKAGE_DATA[PREFF_DOT+pack].extend([f.split('/')[-1] for f in glob.glob(PREFF_SLASH+p) if os.path.isfile(f)])

    extra_options.update(dict(
        platforms="UNIX",
        description=DESCRIPTION,
        long_description=DESCRIPTION + " (r"+ get_svnrevision()+")",
        package_data=PACKAGE_DATA,
        packages=DU_PACKAGES,
        py_modules=DU_FILES
        ))
    # Run setup
    setup(**extra_options)

